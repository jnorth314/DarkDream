from functools import cache
import json
import os
import typing

import cv2
from PyQt6.QtGui import QIcon, QImage, QPixmap
from PyQt6.QtWidgets import QFrame, QHBoxLayout, QGridLayout, QPushButton, QWidget

@cache
def get_tiles() -> list[cv2.typing.MatLike]:
    """Return a list of images of all tiles that make up a minimap"""

    path_to_tiles = os.path.join(os.path.dirname(os.path.abspath(__file__)), "../res/tiles.png")

    tiles = cv2.imread(path_to_tiles)

    return [
        tiles[y:y + 16, x:x + 16]
        for y in range(0, 16*6, 16)
        for x in range(0, 16*8, 16)
    ]

@cache
def get_maps() -> list[list[list[int]]]:
    """Get all of the maps generated by Dark Cloud"""

    path_to_maps = os.path.join(os.path.dirname(os.path.abspath(__file__)), "../res/maps.json")

    with open(path_to_maps, "r", encoding="utf-8") as f:
        maps: dict[str, list[list[int]]] = json.load(f)
        return list(maps.values())

def is_matching_dungeon(dungeon: list[list[int]], map_: list[list[int]]) -> bool:
    """Return whether the discovered portions of a dungeon matches the given map"""

    return all(dungeon[y][x] in (-1, 42, 43, 44, 45, 46, 47) or dungeon[y][x] == map_[y][x]
               for x in range(15)
               for y in range(15))

class TileButton(QPushButton): # pragma: no cover
    """Button that holds Tile information"""

    def __init__(self, x: int, y: int, id_: int) -> None:
        super().__init__()

        self.x_ = x
        self.y_ = y

        self.id = id_

        self.setFixedSize(16, 16)
        self.set_icon()

    def set_icon(self) -> None:
        """Set the icon to the tile matching the ID"""

        if self.id != -1:
            tiles = get_tiles()

            image = QImage(tiles[self.id].tobytes(), 16, 16, 48, QImage.Format.Format_BGR888)
            pixmap = QPixmap(image)
            icon = QIcon(pixmap)

            self.setIcon(icon)

class DungeonFrame(QFrame): # pragma: no cover
    """Frame to hold dungeon information"""

    def __init__(self) -> None:
        super().__init__()

        self.buttons = [[TileButton(x, y, -1) for x in range(15)] for y in range(15)]

        layout = QGridLayout()
        layout.setSpacing(0)

        for x in range(15):
            for y in range(15):
                self.buttons[y][x].setCheckable(True)
                layout.addWidget(self.buttons[y][x], y, x)

        self.setLayout(layout)
        self.setFixedSize(18*15, 18*15)

class TileFrame(QFrame): # pragma: no cover
    """Frame to hold tile information from the tileset"""

    def __init__(self) -> None:
        super().__init__()

        self.buttons = [[TileButton(x, y, 8*y + x) for x in range(8)] for y in range(6)]

        layout = QGridLayout()
        layout.setSpacing(0)

        for x in range(8):
            for y in range(6):
                layout.addWidget(self.buttons[y][x], y, x)

        self.setLayout(layout)
        self.setFixedSize(18*8, 18*6)

class CompareWidget(QWidget): # pragma: no cover
    """Widget to handle doing comparisons from user input to the maps"""

    def __init__(self) -> None:
        super().__init__()

        self.setWindowTitle("DarkDream")

        self.dungeon = DungeonFrame()
        self.tiles = TileFrame()

        for x in range(15):
            for y in range(15):
                self.dungeon.buttons[y][x].clicked.connect(self.on_tile_toggle)

        for x in range(8):
            for y in range(6):
                self.tiles.buttons[y][x].clicked.connect(self.on_tile_set)

        row = QHBoxLayout()

        row.addWidget(self.dungeon)
        row.addWidget(self.tiles)

        self.setLayout(row)

    def get_checked_tile(self) -> TileButton | None:
        """Get the currently checked tile of the dungeon map"""

        for x in range(15):
            for y in range(15):
                if self.dungeon.buttons[y][x].isChecked():
                    return self.dungeon.buttons[y][x]

        return None

    @typing.no_type_check
    def on_tile_toggle(self) -> None:
        """Callback for when a dungeon tile is selected"""

        for x in range(15):
            for y in range(15):
                self.dungeon.buttons[y][x].setChecked(False)

        self.sender().setChecked(True)

    @typing.no_type_check
    def on_tile_set(self) -> None:
        """Callback for when a tile from the set is selected"""

        tile = self.get_checked_tile()

        if tile is not None:
            tile.id = self.sender().id
            tile.set_icon()

        dungeon = [[self.dungeon.buttons[y][x].id for x in range(15)] for y in range(15)]

        matching_dungeons = [map_ for map_ in get_maps() if is_matching_dungeon(dungeon, map_)]

        if len(matching_dungeons) == 1:
            map_ = matching_dungeons[0]

            for x in range(15):
                for y in range(15):
                    self.dungeon.buttons[y][x].id = map_[y][x]
                    self.dungeon.buttons[y][x].set_icon()
